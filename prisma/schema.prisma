generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hotels {
  id               String     @id @default(cuid())
  HotelName        String
  Website          String
  location         String
  category         String
  loc_Lat          String
  loc_Lng          String
  loc_Place        String
  loc_City         String
  loc_State        String
  loc_Country      String
  FrontImg         String
  Gallery          String
  PhoneNumber      String
  CountryCode      String
  Email            String
  HotelDescription String
  StarRating       Float
  ReviewNumber     Int
  Tags             String
  SpecialTags      String
  PopularityNumber Int
  DateAdded        DateTime
  TrendingNumber   Int
  SN_Facebook      String
  SN_Twitter       String
  SN_Instagram     String
  SN_Pinterest     String
  Rooms            Rooms[]
}

model Reviews {
  id          Int      @id @default(autoincrement())
  rating      Int
  user        String
  date        DateTime
  hotelReview String
}

model Rooms {
  id                    String       @id @default(cuid())
  Available             Boolean
  RoomImg               String
  RoomName              String
  OriginalPricePerNight Int
  Discount              Int
  About                 String
  Facility              String
  Amenities             String
  Inclusions            String 
  Hotels                Hotels?      @relation(fields: [hotelsId], references: [id])
  hotelsId              String?
}

model Users {
  id            String     @id @default(cuid())
  fullName      String
  gender        String?
  streetAddress String?
  city          String?
  state         String?
  zipCode       String?
  email         String     @unique
  phoneNumber   String?
  password      String
  bookings      Bookings[]
  role          Roles    @relation(fields: [roleId], references: [id])
  roleId        Int
  picture       String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Payments {
  id             String    @id @default(cuid())
  CardFirstName  String
  CardSecondName String
  CardBankEntity String
  CardNumber     String
  CardType       Int
  FinalPrice     Int
  Tax            Int
  BasePrice      Int
  PromoCode      Boolean
  Status         String
  bookings       Bookings? @relation(fields: [bookingsId], references: [id])
  bookingsId     String?  @unique
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Bookings {
  id            String     @id @default(cuid())
  HotelName     String
  RoomType      String
  DateOfStay    DateTime
  NumberOfGuest Int
  payments      Payments?
  Owner         Users?     @relation(fields: [OwnerId], references: [id])
  OwnerId       String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Roles {
  id      Int  @id @default(autoincrement())
  Name    String
  Users   Users[]
}

model EmailSubcribers {
  id    Int    @id @default(autoincrement())
  Email String
}

model Policies {
  id     Int      @id @default(autoincrement())
  Name   String
}

model Tags {
  id     Int      @id @default(autoincrement())
  Name   String
}

model Amenities {
  id    Int     @id @default(autoincrement())
  Name  String  @unique

}

model Inclusions {
  id    Int     @id @default(autoincrement())
  Name  String
}
